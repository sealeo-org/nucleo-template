set(FLASHSIZE 0)
set(RAMSIZE   0)

execute_process(COMMAND bash -c "echo ${NUCLEO}|cut -c2" OUTPUT_VARIABLE NUCLEO_ID)
string(STRIP ${NUCLEO_ID} NUCLEO_ID)

set(NUCLEO_FLAGS "-D__MBED__=1")

if(${NUCLEO} MATCHES "^F303K8$")
	set(FLASHSIZE 65536)
	set(RAMSIZE   16384)
	set(CORTEXM   4)
	set(LDFILE    "STM32F303X8.ld")
	set(NUCLEO_XID F303x8)

	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_I2CSLAVE=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -D__FPU_PRESENT=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_PORTOUT=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_PORTINOUT=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_RTOS_M4_M7")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_LOWPOWERTIMER=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_RTC=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_STM32F303K8")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_NUCLEO_F303K8")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -D__CMSIS_RTOS")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTOOLCHAIN_GCC")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_STDIO_MESSAGES=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_CAN=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_CORTEX_M")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_I2C_ASYNCH=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_LIKE_CORTEX_M4")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_ANALOGOUT=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_M4")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_UVISOR_UNSUPPORTED")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_STM32F303x8")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_SERIAL=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_SPI_ASYNCH=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_INTERRUPTIN=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_CORTEX")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_I2C=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTRANSACTION_QUEUE_SIZE_SPI=2")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DRTC_LSI=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -D__CORTEX_M4")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -D__MBED_CMSIS_RTOS_CM")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_FAMILY_STM32")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DMBED_BUILD_TIMESTAMP=1512679959.04")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_FF_ARDUINO")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_PORTIN=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_RELEASE")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_STM")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_SERIAL_FC=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_LIKE_MBED")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_STM32F3")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_SLEEP=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTOOLCHAIN_GCC_ARM")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_SPI=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_SPISLAVE=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_ANALOGIN=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_PWMOUT=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DARM_MATH_CM4")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTOOLCHAIN_object")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -include")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} mbed_config.h")
endif()

if(${NUCLEO} MATCHES "^F401CD$")
	set(FLASHSIZE 384000)
	set(RAMSIZE   98304)
	set(CORTEXM   4)
	set(LDFILE    "STM32F401XD.ld")
	set(NUCLEO_XID F401xD)
endif()

if(${NUCLEO} MATCHES "^F401RE$")
	set(FLASHSIZE 524288)
	set(RAMSIZE   98304)
	set(CORTEXM   4)
	set(LDFILE    "STM32F401XE.ld")
	set(NUCLEO_XID F401xE)

	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_I2CSLAVE=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -D__FPU_PRESENT=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_PORTOUT=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DUSBHOST_OTHER")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_NUCLEO_F401RE")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_RTOS_M4_M7")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_RTC=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTOOLCHAIN_object")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_SERIAL_ASYNCH=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_STM32F4")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -D__CMSIS_RTOS")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_LIKE_MBED")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTOOLCHAIN_GCC")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_I2C_ASYNCH=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_CORTEX_M")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_LIKE_CORTEX_M4")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_M4")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_UVISOR_UNSUPPORTED")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_SPI_ASYNCH=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_SERIAL=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_INTERRUPTIN=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_CORTEX")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_I2C=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTRANSACTION_QUEUE_SIZE_SPI=2")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -D__CORTEX_M4")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_STDIO_MESSAGES=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_STM32F401RE")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_FF_MORPHO")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_FAMILY_STM32")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_FF_ARDUINO")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_PORTIN=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_RELEASE")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_STM")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_SERIAL_FC=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_PORTINOUT=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DMBED_BUILD_TIMESTAMP=1512688853.08")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -D__MBED_CMSIS_RTOS_CM")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_SLEEP=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTOOLCHAIN_GCC_ARM")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_SPI=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DUSB_STM_HAL")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_SPISLAVE=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_ANALOGIN=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_PWMOUT=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DDEVICE_FLASH=1")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DARM_MATH_CM4")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -DTARGET_STM32F401xE")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} -include")
	set(NUCLEO_FLAGS "${NUCLEO_FLAGS} mbed_config.h")
endif()

if(${FLASHSIZE} MATCHES "^0$")
	message(FATAL_ERROR "[sealeo/nucleo-template] Invalid target ${NUCLEO}")
endif()

add_custom_target(display_size ALL
	DEPENDS generate_bin
	COMMAND bash -c "${CMAKE_CURRENT_SOURCE_DIR}/size_info ${ELF} ${FLASHSIZE} ${RAMSIZE}")
